version: '3.8'

services:
  # Reverse proxy / Load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - frontend_static:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    networks:
      - guerilla-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend service (production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3001
      - BACKEND_HOST=${BACKEND_HOST:-0.0.0.0}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_CONSOLE=${LOG_CONSOLE:-false}
      - LOG_FILE=${LOG_FILE:-true}
      - SHOW_STACK_TRACE=${SHOW_STACK_TRACE:-false}
      
      # Database configuration
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-guerilla_teaching}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      # Redis configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      
      # Email configuration
      - EMAIL_SERVICE=${EMAIL_SERVICE:-gmail}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_TO=${EMAIL_TO}
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # API Keys
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    volumes:
      - ./logs:/app/logs
      - backend_uploads:/app/uploads
    networks:
      - guerilla-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  # Frontend service (production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${REACT_APP_API_URL:-/api}
      - REACT_APP_LOG_LEVEL=${REACT_APP_LOG_LEVEL:-warn}
      - REACT_APP_LOG_CONSOLE=${REACT_APP_LOG_CONSOLE:-false}
      - REACT_APP_LOG_JSON=${REACT_APP_LOG_JSON:-true}
      - REACT_APP_VERSION=${APP_VERSION:-1.0.0}
      - REACT_APP_BUILD_DATE=${BUILD_DATE}
    volumes:
      - frontend_static:/app/build
    networks:
      - guerilla-network
    restart: unless-stopped

  # Production database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-guerilla_teaching}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    networks:
      - guerilla-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Security: don't expose ports in production
    # ports:
    #   - "5432:5432"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - guerilla-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - guerilla-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3100:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - guerilla-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Log aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3101:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    networks:
      - guerilla-network
    restart: unless-stopped
    profiles:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./logs:/var/log/app:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    networks:
      - guerilla-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Backup service
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      - BACKUP_RETENTION=${BACKUP_RETENTION:-7}  # Keep 7 days
      - S3_BUCKET=${S3_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
    volumes:
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - guerilla-network
    restart: unless-stopped
    profiles:
      - backup

volumes:
  # Application data
  frontend_static:
  backend_uploads:
  
  # Database volumes
  postgres_data:
  redis_data:
  
  # Monitoring volumes
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  guerilla-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16